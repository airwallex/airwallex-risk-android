apply plugin: 'jacoco'

jacoco {
    toolVersion = "$jacocoVersion"
}

// Force Jacoco Version

subprojects {
    configurations.all {
        resolutionStrategy {
            eachDependency { details ->
                if ('org.jacoco' == details.requested.group) {
                    details.useVersion "$jacocoVersion"
                }
            }
        }
    }
}

project.afterEvaluate { project ->

    tasks.withType(Test) {
        jacoco.includeNoLocationClasses = true
        jacoco.excludes = ['jdk.internal.*']
    }

    final buildType = "debug"
    final variant = "$buildType"
    final taskName = "jacocoTest${variant.capitalize()}UnitTestReport"

    task "$taskName"(type: JacocoReport, dependsOn: "test${variant.capitalize()}UnitTest") {

        reports {
            csv.required = false
            xml.required = true
            html.required = true
        }

        final fileFilter = rootProject.coverageFileFilter

        final androidKotlinTree = fileTree(dir: "${project.buildDir}/tmp/kotlin-classes/${variant}", excludes: fileFilter)
        final kotlinTree = fileTree(dir: "${project.buildDir}/classes/kotlin/main", excludes: fileFilter)
        final javacTree = fileTree(dir: "${project.buildDir}/intermediates/javac/${variant}/classes", excludes: fileFilter)

        final mainSrc = "${project.projectDir}/src/main/java"
        final buildTypeSrc = "${project.projectDir}/src/${buildType}/java"

        sourceDirectories.setFrom files([mainSrc, buildTypeSrc])
        classDirectories.setFrom files([androidKotlinTree, kotlinTree, javacTree])
        executionData.setFrom fileTree(dir: project.buildDir, includes: [
                "jacoco/test${variant.capitalize()}UnitTest.exec",
                "outputs/unit_test_code_coverage/${variant}UnitTest/test${variant.capitalize()}UnitTest.exec"
        ])
    }
}